package org.vollgaz.sas.models

import scala.xml.{Elem, Node}

/**
  * Represent access object. Access maps entities(folder, user, groups, ...) to permissions.
  * accesses ids are used by other object to link to permission
  *
  * @param id          Unique id generated by SASmeta
  * @param name        The id is reused in the name //FIXME Could be removed
  * @param permissions The list of [[Permission]] . Care , each permission type come by two variation : granted or denied.
  */
case class Access(id: String, name: String, permissions: Seq[String])

object Access extends Factory {

    override def buildCollection(xmlModel: Elem): Map[String, Access] = {
        val nodeSeq = xmlModel \\ "Objects" \ "AccessControlEntry"
        nodeSeq.map(buildElement).toMap
    }

    override def buildElement(node: Node): (String, Access) = {
        getId(node) -> Access(getId(node), getName(node), getPermissions(node))
    }

    private def getPermissions(node: Node) = (node \\ "Permissions" \ "Permission").map(x => (x \@ "Id").toString)
}