package org.vollgaz.sas.models

import scala.xml.{Elem, Node}

/**
  * Group are the most important metadata.
  * They link everyone et everything (if the security in SAS is correctly implemented).
  *
  * @param id             Unique ID generated by the SASmeta server
  * @param name           The display name of the group
  * @param grouptype      There are two types, group and role
  *                  - Groups  are created by administrators
  *                  - Roles  are hard-programmed system groups which have specific control capacities.
  * @param accesses       The list of the [[Access]] IDs assigned to the group.
  * @param groupparents   The list of groups IDs from which the current group inherit
  * @param groupmembers   The list of groups IDs which are member of the current group.
  * @param usermembers    The [[Person]] IDs who are members of the current group.
  * @param accesstemplate The default accesses IDs assigned by system when the group was created.
  *
  */
case class Group(id: String, name: String, grouptype: String, accesses: Seq[String], groupparents: Seq[String], groupmembers: Seq[String], usermembers: Seq[String],
                 accesstemplate: Seq[String])

object Group extends Factory {
    def buildCollection(xmlModel: Elem): Map[String, Group] = {
        val nodeSeq = xmlModel \\ "Objects" \ "IdentityGroup"
        nodeSeq.map(buildElement).toMap
    }

    def buildElement(node: Node): (String, Group) = {
        getId(node) -> Group(getId(node),
            getName(node),
            getType(node),
            getAccessControlEntries(node),
            getIdentityGroups(node),
            getGroupMembers(node),
            getUserMembers(node),
            getAccessTemplate(node)
        )
    }

    def getType(node: Node): String = node \@ "PublicType"

    def getGroupMembers(node: Node): Seq[String] = (node \\ "MemberIdentities" \ "IdentityGroup").map(_ \@ "Id")

    def getUserMembers(node: Node): Seq[String] = (node \\ "MemberIdentities" \ "Person").map(_ \@ "Id")

    def getAccessTemplate(node: Node): Seq[String] = (node \\ "AccessControls" \ "AccessControlTemplate").map(_ \@ "Id")
}