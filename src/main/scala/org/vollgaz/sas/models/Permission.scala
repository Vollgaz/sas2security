package org.vollgaz.sas.models

import scala.xml.{Elem, Node}

/**
  * Represent a permission.
  * Each permission represents a specific control over an object, and defines the capability for the control : allowed or denied.
  *
  * @param id        Unique ID generated by the SASmeta server
  * @param name      The name of the control. The full controls list is contained in [[PermissionEnum]]
  * @param isGranted Indicate if the control is allowed or denied.
  */
case class Permission(id: String, name: String, isGranted: Boolean)

object Permission extends Factory {
    def buildCollection(xmlModel: Elem): Map[String, Permission] = {
        val nodeSeq = xmlModel \\ "Objects" \ "Permission"
        nodeSeq.map(buildElement).toMap
    }

    def buildElement(node: Node): (String, Permission) = {
        getId(node) -> Permission(getId(node),
            getName(node),
            isGranted(node))
    }

    private def isGranted(node: Node) = {
        node \@ "Type" match {
            case "GRANT" => true
            case _       => false
        }
    }
}

